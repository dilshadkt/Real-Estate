// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// when ever you make changes in model ==> npx prisma db push
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  email String @unique
  password String
  avatar String?
  createAt DateTime @default(now())
  post Post[]
  savedPost SavedPost[]
  chats Chat[] @relation(fields: [chatIDs], references: [id])
  chatIDs String[] @db.ObjectId
}

model Post {
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    price Int
    images String[]
    address String
    city String 
    bedroom Int
    bathroom Int 
    latitude String
    longitude String
    type Type
    property Property
    createdAt DateTime @default(now())
    user User @relation(fields: [userId],references: [id])
    userId  String @db.ObjectId
    postDetails PostDetails?
    savedPosts SavedPost[]

    
}

enum Type {
  buy
  rent
}
enum Property {
  apartment
  house
  condo
  land
}

model PostDetails {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  desc String
  utilities String?
  pet String?
  income String?
  size Int?
  school  Int?
  bus Int?
  restaurant Int?
  post  Post @relation(fields: [postId],references: [id])
  postId String @unique @db.ObjectId
  
}

model SavedPost {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  post  Post @relation(fields: [postId],references: [id])
  user User @relation(fields: [userId],references: [id])
  postId String @unique @db.ObjectId
  userId  String @db.ObjectId
  createdAt DateTime @default(now())
  @@unique([userId,postId])
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  users User[] @relation(fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
  createAt DateTime @default(now())
  seenBy String[] @db.ObjectId
  message Message[]
  lastMessage String?

}
model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  text String
  userId String
  chat Chat @relation(fields: [chatId],references: [id])
  chatId String @db.ObjectId
  createdAt DateTime @default(now())

}